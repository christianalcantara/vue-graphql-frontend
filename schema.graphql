# Exposes a URL that specifies the behaviour of this scalar.
directive @specifiedBy(
  # The URL that specifies the behaviour of this scalar.
  url: String!
) on SCALAR
type CharacterType implements DjangoNode {
  # The ID of the object
  id: ID!
  created: DateTime!
  modified: DateTime!
  name: String!
  description: String
  thumbnail: String!
  thumbUrl: String
}

type CharacterTypeConnection {
  # Pagination data for this connection.
  pageInfo: PageInfo!
  # Contains the nodes in this connection.
  edges: [CharacterTypeEdge]!
}

# A Relay edge containing a `CharacterType` and its cursor.
type CharacterTypeEdge {
  # The item at the end of the edge
  node: CharacterType
  # A cursor for use in pagination
  cursor: String!
}

type CreateUserField {
  user: UserType
}

# The `DateTime` scalar type
represents a DateTime
# value as specified by
# [iso8601](https://en.wikipedia.org/wiki/ISO_8601).
scalar DateTime

# This class removes base64 unique ids and operates with plain Integer IDs
interface DjangoNode {
# The ID of the object
id: ID!
}

type FavoriteType implements DjangoNode {
# The ID of the object
id: ID!
created: DateTime!
user: UserType!
character: CharacterType!
}

# The `GenericScalar` scalar type
represents a generic
# GraphQL scalar value
that could be:
# String, Boolean, Int, Float, List or Object.
scalar GenericScalar

type Mutation {
createUser(
email: String!
password: String!
username: String!
): CreateUserField
tokenAuth(username: String!, password: String!): ObtainJSONWebToken
verifyToken(token: String = null): Verify
refreshToken(token: String = null): Refresh
}

type ObtainJSONWebToken {
payload: GenericScalar!
refreshExpiresIn: Int!
user: UserType
token: String!
}

# The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
type PageInfo {
# When paginating forwards, are there more items?
hasNextPage: Boolean!
# When paginating backwards, are there more items?
hasPreviousPage: Boolean!
# When paginating backwards, the cursor to continue.
startCursor: String
# When paginating forwards, the cursor to continue.
endCursor: String
}

type Query {
me: UserType
character(
# The ID of the object
id: ID!
): CharacterType
characters(
offset: Int = null
before: String = null
after: String = null
first: Int = null
last: Int = null
id: String = null
name: String = null
): CharacterTypeConnection
favorite(
# The ID of the object
id: ID!
): FavoriteType
}

type Refresh {
payload: GenericScalar!
refreshExpiresIn: Int!
token: String!
}

type UserType implements DjangoNode {
# The ID of the object
id: ID!
password: String!
lastLogin: DateTime
# Designates that this user has all permissions without explicitly assigning them.
isSuperuser: Boolean!
# Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
username: String!
firstName: String!
lastName: String!
email: String!
# Designates whether the user can log into this admin site.
isStaff: Boolean!
# Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
isActive: Boolean!
dateJoined: DateTime!
}

type Verify {
payload: GenericScalar!
}

